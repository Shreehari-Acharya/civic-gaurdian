
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  NEW
  IN_PROGRESS
  RESOLVED
  REJECTED
  ON_HOLD
}

model User {
  email         String    @unique
  phoneNumber   String?   @unique
  id            String    @id @default(uuid())
  name          String
  address       String?
  pincode       String?
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  issues        issue[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model issue {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      status   @default(NEW)
  priority    Int?     @default(0)
  createdAt   DateTime @default(now())
  audio_url   String?
  image_url   String?
  video_url   String?
  lat         String
  long        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt   DateTime @default(now()) @updatedAt
}
